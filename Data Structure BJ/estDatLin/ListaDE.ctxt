#BlueJ class context
comment0.target=ListaDE
comment0.text=\r\n\ Clase\ que\ representa\ una\ lista\ doblemente\ enlazada\ (ListaDE)\ gen\u00E9rica.\r\n
comment1.params=
comment1.target=ListaDE()
comment10.params=pos
comment10.target=java.lang.Object\ acceder(int)
comment11.params=dato
comment11.target=java.lang.Object\ acceder(java.lang.Object)
comment11.text=private\ T\ acceder(T\ dato)\ {\r\n\ \ \ \ \ \ \ \ return\ null;\r\n}
comment12.params=dato
comment12.target=boolean\ buscar(java.lang.Object)
comment13.params=
comment13.target=int\ longitud()
comment14.params=
comment14.target=void\ vaciar()
comment15.params=dato\ pos
comment15.target=void\ reemplazar(java.lang.Object,\ int)
comment16.params=lista
comment16.target=ListaDE\ eliminarDuplicados(ListaDE)
comment16.text=\ 1.-\ (4\ puntos)\ Dada\ una\ lista\ de\ doble\ enlace,\ implementar\ un\ m\u00E9todo\ el\ cual\ elimine\ los\r\n\ \ \ \ \ \ \ \ duplicados\ de\ la\ lista.\ Por\ ejemplo,\ si\ la\ lista.\ \ si\ la\ lista\ tiene\ los\ siguientes\ elementos\r\n\ \ \ \ \ \ \ \ {2,3,4,5,3,4,6,7,4,5,3,9,1,1}\ se\ tiene\ que\ volver\ {2,3,4,5,6,7,9,1}\ El\ m\u00E9todo\ principal\ deber\u00E1\r\ntener\ la\ siguiente\ firma\:\ eliminarDuplicados(ListaDE<T>\ lista)\ \:\ ListaDE<T>
comment17.params=
comment17.target=Lista\ dividirMitad()
comment18.params=lista1\ lista2
comment18.target=void\ dividir(Lista,\ Lista)
comment19.params=dato
comment19.target=Lista\ dividir(java.lang.Object)
comment2.params=
comment2.target=boolean\ vacia()
comment3.params=dato
comment3.target=void\ insertar(java.lang.Object)
comment4.params=dato\ pos
comment4.target=void\ insertar(java.lang.Object,\ int)
comment5.params=inic\ pos
comment5.target=NodoDE\ buscar(NodoDE,\ int)
comment6.params=pos
comment6.target=void\ eliminar(int)
comment7.params=dato
comment7.target=void\ eliminar(java.lang.Object)
comment8.params=inic\ dato
comment8.target=NodoDE\ buscar(NodoDE,\ java.lang.Object)
comment9.params=pos1\ pos2
comment9.target=void\ eliminar(int,\ int)
numComments=20
